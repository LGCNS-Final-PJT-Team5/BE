name: Build, Push to ECR and Deploy

on:
  push:
    branches:
      # - main
      - 2-cicd-setting  # 테스트용

env:
  AWS_REGION: ap-northeast-2
  IMAGE_TAG: latest
  APIGATEWAY_REGISTRY_URI: 211125408736.dkr.ecr.ap-northeast-2.amazonaws.com/modive/apigateway-service
  CONFIG_REGISTRY_URI: 211125408736.dkr.ecr.ap-northeast-2.amazonaws.com/modive/config-service
  DISCOVERY_REGISTRY_URI: 211125408736.dkr.ecr.ap-northeast-2.amazonaws.com/modive/service-discovery

jobs:
  build-push-deploy:
    name: Build, Push Docker Images and Deploy
    runs-on: ubuntu-latest  # GitHub 제공 Ubuntu 최신 러너 사용

    permissions:
      id-token: write
      contents: read  # AWS 인증(OIDC) 및 레포지토리 코드 읽기 허용

    steps:
      # 소스코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4  # 레포지토리 소스코드 체크아웃

      # AWS 자격 증명 구성
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # ECR 로그인
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2  # ECR 로그인 처리

      # 모든 서비스 도커 이미지 빌드 및 ECR 푸시
      - name: Build and push Docker images for all services
        run: |
          echo "Building image for apigateway-service"
          docker build -t apigateway-service:${{ env.IMAGE_TAG }} ./apigateway-service
          docker tag apigateway-service:${{ env.IMAGE_TAG }} ${{ env.APIGATEWAY_REGISTRY_URI }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.APIGATEWAY_REGISTRY_URI }}:${{ env.IMAGE_TAG }}

          echo "Building image for config-service"
          docker build -t config-service:${{ env.IMAGE_TAG }} ./config-service
          docker tag config-service:${{ env.IMAGE_TAG }} ${{ env.CONFIG_REGISTRY_URI }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.CONFIG_REGISTRY_URI }}:${{ env.IMAGE_TAG }}

          echo "Building image for service-discovery"
          docker build -t service-discovery:${{ env.IMAGE_TAG }} ./service-discovery
          docker tag service-discovery:${{ env.IMAGE_TAG }} ${{ env.DISCOVERY_REGISTRY_URI }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.DISCOVERY_REGISTRY_URI }}:${{ env.IMAGE_TAG }}

      # CodeDeploy 배포용 패키지 준비
      - name: Prepare deployment package
        run: |
          mkdir deploy-package
          cp appspec.yml deploy-package/
          mkdir -p deploy-package/scripts
          cp scripts/deploy.sh deploy-package/scripts/

      # 배포 패키지를 zip 압축
      - name: Zip deployment package
        run: |
          cd deploy-package
          zip -r ../app.zip .

      # 압축 파일을 S3에 업로드
      - name: Upload deployment package to S3
        run: |
          aws s3 cp app.zip s3://${{ secrets.S3_BUCKET }}/app.zip

      # CodeDeploy를 통해 배포 트리거
      - name: Trigger deployment with CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=${{ secrets.S3_BUCKET }},key=app.zip,bundleType=zip
